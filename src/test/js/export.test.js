import assert from 'node:assert'
import { test, describe } from 'vitest'
import * as core from '../../../target/esm/core.mjs'
import * as index from '../../../target/esm/index.mjs'

//prettier-ignore
describe('core', () => {
  test('exports', () => {
    assert.equal(typeof core.IPV4, 'string', 'core.IPV4')
    assert.equal(typeof core.IPV6, 'string', 'core.IPV6')
    assert.equal(typeof core.V4_RE, 'object', 'core.V4_RE')
    assert.equal(typeof core.V4_S_RE, 'object', 'core.V4_S_RE')
    assert.equal(typeof core.V6_RE, 'object', 'core.V6_RE')
    assert.equal(typeof core.V6_S_RE, 'object', 'core.V6_S_RE')
    assert.equal(typeof core.cidr, 'function', 'core.cidr')
    assert.equal(typeof core.cidrSubnet, 'function', 'core.cidrSubnet')
    assert.equal(typeof core.fromLong, 'function', 'core.fromLong')
    assert.equal(typeof core.fromPrefixLen, 'function', 'core.fromPrefixLen')
    assert.equal(typeof core.isEqual, 'function', 'core.isEqual')
    assert.equal(typeof core.isLoopback, 'function', 'core.isLoopback')
    assert.equal(typeof core.isPrivate, 'function', 'core.isPrivate')
    assert.equal(typeof core.isPublic, 'function', 'core.isPublic')
    assert.equal(typeof core.isSpecial, 'function', 'core.isSpecial')
    assert.equal(typeof core.isV4, 'function', 'core.isV4')
    assert.equal(typeof core.isV4Format, 'function', 'core.isV4Format')
    assert.equal(typeof core.isV6, 'function', 'core.isV6')
    assert.equal(typeof core.isV6Format, 'function', 'core.isV6Format')
    assert.equal(typeof core.loopback, 'function', 'core.loopback')
    assert.equal(typeof core.mask, 'function', 'core.mask')
    assert.equal(typeof core.normalizeAddress, 'function', 'core.normalizeAddress')
    assert.equal(typeof core.normalizeFamily, 'function', 'core.normalizeFamily')
    assert.equal(typeof core.normalizeToLong, 'function', 'core.normalizeToLong')
    assert.equal(typeof core.not, 'function', 'core.not')
    assert.equal(typeof core.or, 'function', 'core.or')
    assert.equal(typeof core.setMode, 'function', 'core.setMode')
    assert.equal(typeof core.subnet, 'function', 'core.subnet')
    assert.equal(typeof core.toBuffer, 'function', 'core.toBuffer')
    assert.equal(typeof core.toLong, 'function', 'core.toLong')
    assert.equal(typeof core.toString, 'function', 'core.toString')
  })
})

//prettier-ignore
describe('index', () => {
  test('exports', () => {
    assert.equal(typeof index.IPV4, 'string', 'index.IPV4')
    assert.equal(typeof index.IPV6, 'string', 'index.IPV6')
    assert.equal(typeof index.V4_RE, 'object', 'index.V4_RE')
    assert.equal(typeof index.V4_S_RE, 'object', 'index.V4_S_RE')
    assert.equal(typeof index.V6_RE, 'object', 'index.V6_RE')
    assert.equal(typeof index.V6_S_RE, 'object', 'index.V6_S_RE')
    assert.equal(typeof index.address, 'function', 'index.address')
    assert.equal(typeof index.addresses, 'function', 'index.addresses')
    assert.equal(typeof index.cidr, 'function', 'index.cidr')
    assert.equal(typeof index.cidrSubnet, 'function', 'index.cidrSubnet')
    assert.equal(typeof index.default, 'object', 'index.default')
    assert.equal(typeof index.default.IPV4, 'string', 'index.default.IPV4')
    assert.equal(typeof index.default.IPV6, 'string', 'index.default.IPV6')
    assert.equal(typeof index.default.V4_RE, 'object', 'index.default.V4_RE')
    assert.equal(typeof index.default.V4_S_RE, 'object', 'index.default.V4_S_RE')
    assert.equal(typeof index.default.V6_RE, 'object', 'index.default.V6_RE')
    assert.equal(typeof index.default.V6_S_RE, 'object', 'index.default.V6_S_RE')
    assert.equal(typeof index.default.address, 'function', 'index.default.address')
    assert.equal(typeof index.default.addresses, 'function', 'index.default.addresses')
    assert.equal(typeof index.default.cidr, 'function', 'index.default.cidr')
    assert.equal(typeof index.default.cidrSubnet, 'function', 'index.default.cidrSubnet')
    assert.equal(typeof index.default.fromLong, 'function', 'index.default.fromLong')
    assert.equal(typeof index.default.fromPrefixLen, 'function', 'index.default.fromPrefixLen')
    assert.equal(typeof index.default.isEqual, 'function', 'index.default.isEqual')
    assert.equal(typeof index.default.isLoopback, 'function', 'index.default.isLoopback')
    assert.equal(typeof index.default.isPrivate, 'function', 'index.default.isPrivate')
    assert.equal(typeof index.default.isPublic, 'function', 'index.default.isPublic')
    assert.equal(typeof index.default.isSpecial, 'function', 'index.default.isSpecial')
    assert.equal(typeof index.default.isV4, 'function', 'index.default.isV4')
    assert.equal(typeof index.default.isV4Format, 'function', 'index.default.isV4Format')
    assert.equal(typeof index.default.isV6, 'function', 'index.default.isV6')
    assert.equal(typeof index.default.isV6Format, 'function', 'index.default.isV6Format')
    assert.equal(typeof index.default.loopback, 'function', 'index.default.loopback')
    assert.equal(typeof index.default.mask, 'function', 'index.default.mask')
    assert.equal(typeof index.default.normalizeAddress, 'function', 'index.default.normalizeAddress')
    assert.equal(typeof index.default.normalizeFamily, 'function', 'index.default.normalizeFamily')
    assert.equal(typeof index.default.normalizeToLong, 'function', 'index.default.normalizeToLong')
    assert.equal(typeof index.default.not, 'function', 'index.default.not')
    assert.equal(typeof index.default.or, 'function', 'index.default.or')
    assert.equal(typeof index.default.setMode, 'function', 'index.default.setMode')
    assert.equal(typeof index.default.subnet, 'function', 'index.default.subnet')
    assert.equal(typeof index.default.toBuffer, 'function', 'index.default.toBuffer')
    assert.equal(typeof index.default.toLong, 'function', 'index.default.toLong')
    assert.equal(typeof index.default.toString, 'function', 'index.default.toString')
    assert.equal(typeof index.fromLong, 'function', 'index.fromLong')
    assert.equal(typeof index.fromPrefixLen, 'function', 'index.fromPrefixLen')
    assert.equal(typeof index.ip, 'object', 'index.ip')
    assert.equal(typeof index.ip.IPV4, 'string', 'index.ip.IPV4')
    assert.equal(typeof index.ip.IPV6, 'string', 'index.ip.IPV6')
    assert.equal(typeof index.ip.V4_RE, 'object', 'index.ip.V4_RE')
    assert.equal(typeof index.ip.V4_S_RE, 'object', 'index.ip.V4_S_RE')
    assert.equal(typeof index.ip.V6_RE, 'object', 'index.ip.V6_RE')
    assert.equal(typeof index.ip.V6_S_RE, 'object', 'index.ip.V6_S_RE')
    assert.equal(typeof index.ip.address, 'function', 'index.ip.address')
    assert.equal(typeof index.ip.addresses, 'function', 'index.ip.addresses')
    assert.equal(typeof index.ip.cidr, 'function', 'index.ip.cidr')
    assert.equal(typeof index.ip.cidrSubnet, 'function', 'index.ip.cidrSubnet')
    assert.equal(typeof index.ip.fromLong, 'function', 'index.ip.fromLong')
    assert.equal(typeof index.ip.fromPrefixLen, 'function', 'index.ip.fromPrefixLen')
    assert.equal(typeof index.ip.isEqual, 'function', 'index.ip.isEqual')
    assert.equal(typeof index.ip.isLoopback, 'function', 'index.ip.isLoopback')
    assert.equal(typeof index.ip.isPrivate, 'function', 'index.ip.isPrivate')
    assert.equal(typeof index.ip.isPublic, 'function', 'index.ip.isPublic')
    assert.equal(typeof index.ip.isSpecial, 'function', 'index.ip.isSpecial')
    assert.equal(typeof index.ip.isV4, 'function', 'index.ip.isV4')
    assert.equal(typeof index.ip.isV4Format, 'function', 'index.ip.isV4Format')
    assert.equal(typeof index.ip.isV6, 'function', 'index.ip.isV6')
    assert.equal(typeof index.ip.isV6Format, 'function', 'index.ip.isV6Format')
    assert.equal(typeof index.ip.loopback, 'function', 'index.ip.loopback')
    assert.equal(typeof index.ip.mask, 'function', 'index.ip.mask')
    assert.equal(typeof index.ip.normalizeAddress, 'function', 'index.ip.normalizeAddress')
    assert.equal(typeof index.ip.normalizeFamily, 'function', 'index.ip.normalizeFamily')
    assert.equal(typeof index.ip.normalizeToLong, 'function', 'index.ip.normalizeToLong')
    assert.equal(typeof index.ip.not, 'function', 'index.ip.not')
    assert.equal(typeof index.ip.or, 'function', 'index.ip.or')
    assert.equal(typeof index.ip.setMode, 'function', 'index.ip.setMode')
    assert.equal(typeof index.ip.subnet, 'function', 'index.ip.subnet')
    assert.equal(typeof index.ip.toBuffer, 'function', 'index.ip.toBuffer')
    assert.equal(typeof index.ip.toLong, 'function', 'index.ip.toLong')
    assert.equal(typeof index.ip.toString, 'function', 'index.ip.toString')
    assert.equal(typeof index.isEqual, 'function', 'index.isEqual')
    assert.equal(typeof index.isLoopback, 'function', 'index.isLoopback')
    assert.equal(typeof index.isPrivate, 'function', 'index.isPrivate')
    assert.equal(typeof index.isPublic, 'function', 'index.isPublic')
    assert.equal(typeof index.isSpecial, 'function', 'index.isSpecial')
    assert.equal(typeof index.isV4, 'function', 'index.isV4')
    assert.equal(typeof index.isV4Format, 'function', 'index.isV4Format')
    assert.equal(typeof index.isV6, 'function', 'index.isV6')
    assert.equal(typeof index.isV6Format, 'function', 'index.isV6Format')
    assert.equal(typeof index.loopback, 'function', 'index.loopback')
    assert.equal(typeof index.mask, 'function', 'index.mask')
    assert.equal(typeof index.normalizeAddress, 'function', 'index.normalizeAddress')
    assert.equal(typeof index.normalizeFamily, 'function', 'index.normalizeFamily')
    assert.equal(typeof index.normalizeToLong, 'function', 'index.normalizeToLong')
    assert.equal(typeof index.not, 'function', 'index.not')
    assert.equal(typeof index.or, 'function', 'index.or')
    assert.equal(typeof index.setMode, 'function', 'index.setMode')
    assert.equal(typeof index.subnet, 'function', 'index.subnet')
    assert.equal(typeof index.toBuffer, 'function', 'index.toBuffer')
    assert.equal(typeof index.toLong, 'function', 'index.toLong')
    assert.equal(typeof index.toString, 'function', 'index.toString')
  })
})
