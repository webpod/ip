import { type BufferLike } from './buffer.ts';
type Family = 4 | 6;
type Raw = string | number | bigint | BufferLike | Array<number>;
type AddressSubnet = {
    networkAddress: string;
    firstAddress: string;
    lastAddress: string;
    broadcastAddress: string;
    subnetMask: string;
    subnetMaskLength: number;
    numHosts: bigint;
    length: bigint;
    contains(ip: string | number | Address): boolean;
};
export declare class Address {
    raw: Raw;
    family: Family;
    big: bigint;
    toBuffer(buff?: BufferLike, offset?: number): BufferLike;
    toArray(): number[];
    toString(family?: Family, mapped?: boolean): string;
    toLong(): number;
    private static create;
    static from(raw: Raw | Address): Address;
    static mask(addr: Raw | Address, mask: Raw | Address): string;
    static subnet(addr: Raw | Address, smask: Raw | Address): AddressSubnet;
    static cidr(cidrString: string): string;
    static cidrSubnet(cidrString: string): AddressSubnet;
    static not(addr: Raw | Address): string;
    static or(addrA: Raw | Address, addrB: Raw | Address): string;
    static isEqual(addrA: Raw | Address, addrB: Raw | Address): boolean;
    static fromPrefixLen: (prefixlen: number, family?: Family) => Address;
    private static fromNumber;
    private static fromBuffer;
    private static fromString;
    private static ipv4ToGroups;
    static parseCidr: (cidr: string) => [Address, Address];
    private static ipV4ToLong;
}
export {};
